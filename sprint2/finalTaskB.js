/**
 КАЛЬКУЛЯТОР
 Задание связано с обратной польской нотацией. Она используется для парсинга арифметических выражений. Еще её иногда называют постфиксной нотацией.

 В постфиксной нотации операнды расположены перед знаками операций.

 Пример 1:
 3 4 +
 означает 3 + 4 и равно 7

 Пример 2:
 12 5 /
 Так как деление целочисленное, то в результате получим 2.

 Пример 3:
 10 2 4 * -
 означает 10 - 2 * 4 и равно 2

 Разберём последний пример подробнее:

 Знак * стоит сразу после чисел 2 и 4, значит к ним нужно применить операцию, которую этот знак обозначает, то есть перемножить эти два числа. В результате получим 8.

 После этого выражение приобретёт вид:

 10 8 -

 Операцию «минус» нужно применить к двум идущим перед ней числам, то есть 10 и 8. В итоге получаем 2.

 Рассмотрим алгоритм более подробно. Для его реализации будем использовать стек.

 Для вычисления значения выражения, записанного в обратной польской нотации, нужно считывать выражение слева направо и придерживаться следующих шагов:

 Обработка входного символа:
 Если на вход подан операнд, он помещается на вершину стека.
 Если на вход подан знак операции, то эта операция выполняется над требуемым количеством значений, взятых из стека в порядке добавления. Результат выполненной операции помещается на вершину стека.
 Если входной набор символов обработан не полностью, перейти к шагу 1.
 После полной обработки входного набора символов результат вычисления выражения находится в вершине стека. Если в стеке осталось несколько чисел, то надо вывести только верхний элемент.
 Замечание про отрицательные числа и деление: в этой задаче под делением понимается математическое целочисленное деление. Это значит, что округление всегда происходит вниз. А именно: если a / b = c, то b ⋅ c — это наибольшее число, которое не превосходит a и одновременно делится без остатка на b.

 Например, -1 / 3 = -1. Будьте осторожны: в C++, Java и Go, например, деление чисел работает иначе.

 В текущей задаче гарантируется, что деления на отрицательное число нет.

 Формат ввода
 В единственной строке дано выражение, записанное в обратной польской нотации. Числа и арифметические операции записаны через пробел.

 На вход могут подаваться операции: +, -, *, / и числа, по модулю не превосходящие 10000.

 Гарантируется, что значение промежуточных выражений в тестовых данных по модулю не больше 50000.

 Формат вывода
 Выведите единственное число — значение выражения.

 Example:
 Ввод:
 2 1 + 3 *

 Вывод:
 9
 */

const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    prompt: ''
});

const result = [];

rl.prompt();

rl.on('line', (line) => {
    result.push(line);
})

rl.on('close', () => {
    console.log(reversePolishNotation(result));
})

function reversePolishNotation(elements) {
    const strElements = elements[0].split(' ');
    const operators = {
        '+': (a, b) => a + b,
        '-': (a, b) => a - b,
        '*': (a, b) => a * b,
        '/': (a, b) => Math.floor(a / b)
    };
    let stack = [];

    strElements.forEach(strElement => {
        if (operators[strElement]) {
            const [right, left] = [stack.pop(), stack.pop()];
            stack.push(operators[strElement](left, right));
            return;
        }

        stack.push(+strElement);
    });

    return stack.pop();
}

/*
-- ПРИНЦИП РАБОТЫ --
Реализация обратной польской нотации выполнена с помощью стека.
Парсим входную строку для определения символа - операнд или знак операции:
Проходим по циклу элементов, если очередной символ:
- Число, то он помещается в стек.
- Символ операции, то извлекаются два последних операнда из стека, выполняется необходимая операция и ее результат помещается в стек.
Так как при операции сложения и умножения порядок операндов не имеет значения, а при вычитании и делении имеет,
то параметры выражения передают в определенном порядке: сначала ближайшее число слева, затем правый от него операнд.
После того, как символы во входной строке заканчиваются, цикл останавливается и выводится результат операции из стека.

-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
Обратная польская нотация представляет собой форму записи математических операций, где операнды расположены перед знаками операций.
Из алгоритма следует, что если входной символ является знаком операции, то необходимая
операция выполняется над двумя последними добавленными значениями и ее результат кладется на вершину стека.
После того, как обработаеся набор входных символов, из вершины стека берется результат вычисления.

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
Алгоритм обратно польской нотации имеет сложность O(n), так как алгоритм линейный и перебирает все элементы входной строки.
Каждый элемент кладется в стек ровно один раз - (Кол-во операндов + кол-во результатов операций, которое равно количеству знаков операции)

-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
Так как алгоритм стековй машины напрямую зависит от количества входных данных,
а стек, содержащий k элементов, занимает O(k) памяти, то пространственная сложность - О(n)
*/
